pipeline {
  agent {
    label 'jenkins-slave'
  }

  parameters {
    choice(name: 'service', choices: ['', 'gateway', 'user'], description: 'Select service')
    choice(name: 'automatically', choices: 'Yes\nNo', description: 'Do you wish to build automatically?')
  }

  environment {
    project = 'microservices'
    service = "${SERVICE}"
  }

  stages {
    stage('Clean workspace') {
      steps {
        deleteDir()
      }
    }

    stage('Git checkout') {
      steps {
        checkout scm
      }
    }

    // To do nx affected auto build // Only Develop
    stage('Install nx') {
      when {
        expression { params.automatically != 'No' }
      }
      steps {
        script {
          sh 'npm install'
        }
      }
    }

    stage('AutoBuild affected services ') {
      when {
        allOf {
          expression { params.automatically != 'No' }
          not {
            branch 'develop'
          }
        }
      }
      steps {
        script {
          getLastSuccessfulCommit()
          services = getBuild()
          println services
          parallel services
        }
      }
    }

    stage('AutoBuild affected services for develop ') {
      when {
        allOf {
          expression { params.automatically != 'No' }
          branch 'develop'
        }
      }
      steps {
        script {
          getLastSuccessfulCommit()
          services = getBuild()
          println services
          parallel services
        }
      }
    }

    stage('Build Service') {
      when {
        environment name: 'automatically', value: 'No'
      }
      steps {
        script {
          def branch = env.BRANCH_NAME
          def buildNumber = Jenkins.instance.getItemByFullName("microservices-apps/${SERVICE}").getItem("${branch}").lastBuild.number + 1
          println buildNumber
          def currentVersionScript = sh(script: "cat ./apps/${SERVICE}/package.json | grep 'version' | awk -F ':' '{print \$2}' |  cut -f 2 -d '\"' ", returnStdout: true).trim()

          build job: "microservices-apps/${SERVICE}/${java.net.URLEncoder.encode branch, 'UTF-8'}", propagate: true, wait: true, parameters: [
            string(name: 'IMAGE_TAG', value: "${currentVersionScript}-${buildNumber}")
          ]
          currentBuild.setDisplayName("${project} - ${SERVICE} - v${currentVersionScript} - ${buildNumber} ")
        }
      }
    }


    stage('AutoDeploy affected services ') {
      when {
        allOf {
          expression { params.automatically != 'No' }
          branch 'develop'
        }
      }
        steps {
          script {
            getLastSuccessfulCommit()
            services = getDeploy()
            println services
            parallel services
          }
        }
      }
    }
}

@NonCPS
def getJenkinsBuildNumber(service, branch) {
  def job = Jenkins.instance.getItemByFullName("microservices-apps/${service}").getItem("${java.net.URLEncoder.encode branch, 'UTF-8'}")
  if (job != null) {
    if (job.getLastBuild() != null) {
      return job.getLastBuild().number + 1
    }
  }

  return 1
}


@NonCPS
def commitHashForBuild(build) {
  def scmAction = build?.actions.find { action -> action instanceof jenkins.scm.api.SCMRevisionAction }
  return scmAction?.revision?.hash
}

def getLastSuccessfulCommit() {
  def lastSuccessfulHash = null
  def lastSuccessfulBuild = Jenkins.instance.getItemByFullName(env.JOB_NAME).getLastSuccessfulBuild()
  println lastSuccessfulBuild
  if ( lastSuccessfulBuild ) {
    lastSuccessfulHash = commitHashForBuild(lastSuccessfulBuild)
  }
  println lastSuccessfulHash
  return lastSuccessfulHash
}

def getBuild() {
  def services = [:]
  def lastSuccessfulHash = getLastSuccessfulCommit()
  def AFFECTED_APPS = sh(
    script: "npm run nx affected:apps -- --base=${lastSuccessfulHash} --head=origin/develop --plain | grep -vi nx | sed '/^\$/d'",
    returnStdout: true).trim().replace('\n', ' ')
  def Af = AFFECTED_APPS.split(' ')
  for (app in Af) {
    def i = app.replace(' ', '')
    println i
    def branch = env.BRANCH_NAME
    def currentVersionScript = sh(script: "cat ./apps/${i}/package.json | grep 'version' | awk -F ':' '{print \$2}' |  cut -f 2 -d '\"' ", returnStdout: true).trim()
    def buildNumber = getJenkinsBuildNumber(i, branch)
    print(buildNumber)
    services["Build ${i}"] = { build job: "microservices-apps/${i}/${java.net.URLEncoder.encode branch, 'UTF-8'}", propagate: true, wait: true, parameters: [
        string(name: 'IMAGE_TAG', value: "${currentVersionScript}-${buildNumber}")
      ]
    }
  }
  return services
}

def getDeploy() {
  def services = [:]
  def lastSuccessfulHash = getLastSuccessfulCommit()
  def AFFECTED_APPS = sh(
    script: "npm run nx affected:apps -- --base=${lastSuccessfulHash} --head=origin/develop --plain | grep -vi nx | sed '/^\$/d'",
    returnStdout: true).trim().replace('\n', ' ')
  def Af = AFFECTED_APPS.split(' ')
  for (app in Af) {
    def i = app.replace(' ', '')
    println i
    def branch = env.BRANCH_NAME
    def currentVersionScript = sh(script: "cat ./apps/${i}/package.json | grep 'version' | awk -F ':' '{print \$2}' |  cut -f 2 -d '\"' ", returnStdout: true).trim()
    def buildNumber = getJenkinsBuildNumber(i, branch) - 1
    print(buildNumber)
    services["Build ${i}"] = { build job: "deploy/microservices-dev", propagate: true, wait: true, parameters: [
        string(name: 'manually', value: "No"),
        string(name: 'SERVICE', value: "microservices-${i}"),
        string(name: 'SERVICE_TAG_INPUT', value: "${currentVersionScript}-${buildNumber}"),
        string(name: 'SERVICE_COUNT_INPUT', value: "1"),
      ]
    }
  }
  return services
}

